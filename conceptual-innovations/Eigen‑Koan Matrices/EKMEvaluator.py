class EKMEvaluator:
    """
    Evaluates EKM traversals on multiple dimensions of performance.
    """
    
    def __init__(self, grid, affect_lexicons=None):
        """
        Initialize evaluator with an EKM grid and optional affect lexicons.
        
        Parameters:
        -----------
        grid : list of lists
            The EKM grid being evaluated
        affect_lexicons : dict, optional
            Dictionary mapping affect categories to sets of related terms
            Used for measuring affective alignment
        """
        self.grid = grid
        self.affect_lexicons = affect_lexicons or self._default_lexicons()
        
    def evaluate_traversal(self, path, model_output):
        """
        Evaluate a traversal path and resulting model output.
        
        Parameters:
        -----------
        path : list of tuples
            The traversal path as (row, col) coordinates
        model_output : str
            The text generated by the model using this path
            
        Returns:
        --------
        metrics : dict
            Dictionary of evaluation metrics
        """
        metrics = {}
        
        # Affect alignment
        metrics['affect_alignment'] = self._calculate_affect_alignment(path, model_output)
        
        # Constraint satisfaction
        metrics['constraint_satisfaction'] = self._calculate_constraint_satisfaction(path, model_output)
        
        # Self-explanation quality
        metrics['self_explanation_quality'] = self._evaluate_self_explanation(model_output)
        
        # Narrative coherence (could use embedding similarity or perplexity)
        metrics['narrative_coherence'] = self._calculate_coherence(model_output)
        
        return metrics
    
    def _calculate_affect_alignment(self, path, output):
        """Measures how well the output aligns with the affects in the traversal path"""
        # Implementation details
        pass
    
    # Other helper methods...
